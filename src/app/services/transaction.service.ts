import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
import { Transaction, TransactionDisplay, TransactionType } from '../types/transaction.type';

@Injectable({
  providedIn: 'root'
})
export class TransactionService {
  private readonly apiUrl = 'http://26.59.168.146:8090';

  constructor(private httpClient: HttpClient) {}

  /**
   * Busca todas as transa√ß√µes do usu√°rio (RECEITAS + DESPESAS + TRANSFER√äNCIAS)
   */
  getAllTransactions(): Observable<Transaction[]> {
    console.log('üåê Fazendo requisi√ß√µes GET para buscar TODAS as transa√ß√µes');

    // Busca transfer√™ncias
    const transfers$ = this.httpClient.get<any[]>(`${this.apiUrl}/transactions`);

    // Busca receitas (endpoint reciphe)
    const receipts$ = this.httpClient.get<any[]>(`${this.apiUrl}/reciphe`);

    // Combina os dois observables usando forkJoin
    return forkJoin({
      transfers: transfers$,
      receipts: receipts$
    }).pipe(
      map(({ transfers, receipts }) => {
        console.log('üì¶ Transfer√™ncias do backend:', transfers.length);
        console.log('üì¶ Receitas do backend:', receipts.length);

        // Normaliza as receitas para ter o mesmo formato que transfer√™ncias
        const normalizedReceipts = receipts.map(receipt => ({
          ...receipt,
          registrationDate: receipt.dateRegistration || receipt.registrationDate, // ‚úÖ Unifica o nome
          foraccounts: null // ‚úÖ Garante que n√£o seja transfer√™ncia
        }));

        console.log('‚úÖ Receitas normalizadas:', normalizedReceipts);

        // Combina os arrays
        const allTransactions = [...transfers, ...normalizedReceipts];

        console.log('üìä Total combinado de transa√ß√µes:', allTransactions.length);
        return allTransactions;
      })
    );
  }

  /**
   * Busca transa√ß√µes de uma conta espec√≠fica e formata para exibi√ß√£o
   */
  getTransactionsByAccount(accountUuid: string): Observable<TransactionDisplay[]> {
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üîç BUSCANDO TRANSA√á√ïES DA CONTA');
    console.log('üìã UUID da Conta:', accountUuid);

    return this.getAllTransactions().pipe(
      map(transactions => {
        console.log('üîé FILTRANDO TRANSA√á√ïES:');

        // Filtra transa√ß√µes relacionadas √† conta
        const accountTransactions = transactions.filter(t => {
          const isOrigin = t.accounts?.uuid === accountUuid;
          const isDestination = t.foraccounts?.uuid === accountUuid;
          const matched = isOrigin || isDestination;

          if (matched) {
            console.log(`   ‚úÖ Transa√ß√£o encontrada:`, {
              description: t.description,
              value: t.value,
              isOrigin,
              isDestination,
              category: t.category.description,
              earn: t.category.earn,
              accounts: t.accounts?.uuid,
              foraccounts: t.foraccounts?.uuid
            });
          }

          return matched;
        });

        console.log('üìä Total de transa√ß√µes filtradas:', accountTransactions.length);

        // Mapeia para formato de exibi√ß√£o
        const displayTransactions = accountTransactions.map(t =>
          this.formatTransactionForDisplay(t, accountUuid)
        );

        console.log('‚úÖ Transa√ß√µes formatadas:', displayTransactions);
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

        return displayTransactions;
      })
    );
  }

  /**
   * Formata uma transa√ß√£o para exibi√ß√£o no extrato
   */
  private formatTransactionForDisplay(transaction: Transaction, accountUuid: string): TransactionDisplay {
    const isOrigin = transaction.accounts?.uuid === accountUuid;
    const isDestination = transaction.foraccounts?.uuid === accountUuid;
    const isTransfer = !!(transaction.accounts && transaction.foraccounts);

    console.log(`üîÑ Formatando transa√ß√£o: ${transaction.description}`);
    console.log(`   √â origem? ${isOrigin}`);
    console.log(`   √â destino? ${isDestination}`);
    console.log(`   √â transfer√™ncia? ${isTransfer}`);
    console.log(`   Categoria earn? ${transaction.category.earn}`);
    console.log(`   üìÖ Data original:`, transaction.registrationDate);
    console.log(`   üìã Dados completos:`, transaction);

    let type: TransactionType;
    let displayValue: number;
    let displayDescription: string;
    let relatedAccountName: string | undefined;
    let icon: string;
    let colorClass: string;

    if (isTransfer) {
      // √â uma transfer√™ncia
      if (isOrigin) {
        // Sa√≠da de dinheiro (origem)
        type = TransactionType.TRANSFER_OUT;
        displayValue = -transaction.value;
        relatedAccountName = transaction.foraccounts?.name;
        displayDescription = `${transaction.description} ‚Üí ${relatedAccountName}`;
        icon = '‚ÜóÔ∏è';
        colorClass = 'transfer-out';
        console.log(`   ‚ÜóÔ∏è Transfer√™ncia ENVIADA: -${transaction.value}`);
      } else {
        // Entrada de dinheiro (destino)
        type = TransactionType.TRANSFER_IN;
        displayValue = transaction.value;
        relatedAccountName = transaction.accounts?.name;
        displayDescription = `${transaction.description} ‚Üê ${relatedAccountName}`;
        icon = '‚ÜôÔ∏è';
        colorClass = 'transfer-in';
        console.log(`   ‚ÜôÔ∏è Transfer√™ncia RECEBIDA: +${transaction.value}`);
      }
    } else {
      // Transa√ß√£o normal (receita ou despesa)
      if (transaction.category.earn) {
        type = TransactionType.INCOME;
        displayValue = transaction.value;
        displayDescription = transaction.description;
        icon = '‚Üë';
        colorClass = 'receita';
        console.log(`   ‚Üë RECEITA: +${transaction.value}`);
      } else {
        type = TransactionType.EXPENSE;
        displayValue = -transaction.value;
        displayDescription = transaction.description;
        icon = '‚Üì';
        colorClass = 'despesa';
        console.log(`   ‚Üì DESPESA: -${transaction.value}`);
      }
    }

    // Garantir que registrationDate existe, sen√£o usa data atual
    const registrationDate = transaction.registrationDate || new Date().toISOString().split('T')[0];

    console.log(`   ‚úÖ Data final formatada: ${registrationDate}`);

    return {
      uuid: transaction.uuid,
      value: transaction.value,
      displayValue,
      description: transaction.description,
      displayDescription,
      registrationDate: registrationDate, // ‚úÖ Garantido
      type,
      isTransfer,
      category: {
        description: transaction.category.description,
        earn: transaction.category.earn
      },
      relatedAccountName,
      icon,
      colorClass
    };
  }

  /**
   * Calcula totais de receitas para uma conta
   */
  calculateAccountIncome(transactions: TransactionDisplay[]): number {
    console.log('üí∞ CALCULANDO TOTAL DE RECEITAS (ENTRADAS):');

    const receitas = transactions.filter(t => {
      const isPositive = t.displayValue > 0;
      if (isPositive) {
        console.log(`   ‚úÖ ${t.displayDescription}: +${t.displayValue}`);
      }
      return isPositive;
    });

    const total = receitas.reduce((sum, t) => sum + t.displayValue, 0);

    console.log(`   üìä Total de entradas: ${receitas.length}`);
    console.log(`   üíµ Soma total: ${total}`);

    return total;
  }

  /**
   * Calcula totais de despesas para uma conta
   */
  calculateAccountExpense(transactions: TransactionDisplay[]): number {
    console.log('üí∏ CALCULANDO TOTAL DE DESPESAS (SA√çDAS):');

    const despesas = transactions.filter(t => {
      const isNegative = t.displayValue < 0;
      if (isNegative) {
        console.log(`   ‚ùå ${t.displayDescription}: ${t.displayValue}`);
      }
      return isNegative;
    });

    const total = despesas.reduce((sum, t) => sum + Math.abs(t.displayValue), 0);

    console.log(`   üìä Total de sa√≠das: ${despesas.length}`);
    console.log(`   üíµ Soma total: ${total}`);

    return total;
  }

  /**
   * Calcula saldo l√≠quido das transa√ß√µes
   */
  calculateNetBalance(transactions: TransactionDisplay[]): number {
    const saldo = transactions.reduce((sum, t) => sum + t.displayValue, 0);

    console.log('üìà CALCULANDO SALDO L√çQUIDO:');
    console.log(`   Resultado: ${saldo}`);

    return saldo;
  }
}
